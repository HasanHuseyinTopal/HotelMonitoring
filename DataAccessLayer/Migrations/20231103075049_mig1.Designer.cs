// <auto-generated />
using System;
using DataAccessLayer.Concrate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(CpContext))]
    [Migration("20231103075049_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Entities.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"));

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AgencyOrderNumber")
                        .HasColumnType("int");

                    b.HasKey("AgencyId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("EntityLayer.Entities.FinancialManagement", b =>
                {
                    b.Property<int>("FinancialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialId"));

                    b.Property<int>("FinancialCurrency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FinancialDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinancialDescripton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialIssuer")
                        .HasColumnType("int");

                    b.Property<double?>("FinancialPayment")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<int>("FinancialUpdateCount")
                        .HasColumnType("int");

                    b.HasKey("FinancialId");

                    b.ToTable("FinancialManagements");
                });

            modelBuilder.Entity("EntityLayer.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.Property<double?>("VisitorPayment")
                        .HasColumnType("float");

                    b.Property<int?>("VisitorPaymentCurreny")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitorPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitorPaymentType")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("VisitorId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EntityLayer.Entities.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reporter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("EntityLayer.Entities.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<bool>("RoomIsClean")
                        .HasColumnType("bit");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<bool>("RoomState")
                        .HasColumnType("bit");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            RoomIsClean = true,
                            RoomNumber = 101,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 2,
                            RoomIsClean = true,
                            RoomNumber = 102,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 3,
                            RoomIsClean = true,
                            RoomNumber = 103,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 4,
                            RoomIsClean = true,
                            RoomNumber = 104,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 5,
                            RoomIsClean = true,
                            RoomNumber = 201,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 6,
                            RoomIsClean = true,
                            RoomNumber = 202,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 7,
                            RoomIsClean = true,
                            RoomNumber = 203,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 8,
                            RoomIsClean = true,
                            RoomNumber = 204,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 9,
                            RoomIsClean = true,
                            RoomNumber = 301,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 10,
                            RoomIsClean = true,
                            RoomNumber = 302,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 11,
                            RoomIsClean = true,
                            RoomNumber = 303,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 12,
                            RoomIsClean = true,
                            RoomNumber = 304,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 13,
                            RoomIsClean = true,
                            RoomNumber = 401,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 14,
                            RoomIsClean = true,
                            RoomNumber = 402,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 15,
                            RoomIsClean = true,
                            RoomNumber = 403,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 16,
                            RoomIsClean = true,
                            RoomNumber = 404,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 17,
                            RoomIsClean = true,
                            RoomNumber = 501,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 18,
                            RoomIsClean = true,
                            RoomNumber = 502,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 19,
                            RoomIsClean = true,
                            RoomNumber = 503,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 20,
                            RoomIsClean = true,
                            RoomNumber = 601,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 21,
                            RoomIsClean = true,
                            RoomNumber = 602,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 22,
                            RoomIsClean = true,
                            RoomNumber = 603,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 23,
                            RoomIsClean = true,
                            RoomNumber = 701,
                            RoomState = false
                        },
                        new
                        {
                            RoomId = 24,
                            RoomIsClean = true,
                            RoomNumber = 702,
                            RoomState = false
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<DateTime?>("VisitorAddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitorCount")
                        .HasColumnType("int");

                    b.Property<string>("VisitorDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VisitorDontChangeRoom")
                        .HasColumnType("bit");

                    b.Property<DateTime>("VisitorEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitorNextId")
                        .HasColumnType("int");

                    b.Property<int?>("VisitorPaymentCurrency")
                        .HasColumnType("int");

                    b.Property<bool>("VisitorPaymentIsDone")
                        .HasColumnType("bit");

                    b.Property<string>("VisitorPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitorPreviusId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorRezervation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorRoomNumber")
                        .HasColumnType("int");

                    b.Property<double?>("VisitorRoomPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("VisitorStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitorState")
                        .HasColumnType("int");

                    b.Property<double?>("VisitorTotalRoomPrice")
                        .HasColumnType("float");

                    b.HasKey("VisitorId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("EntityLayer.Entities.VisitorHistory", b =>
                {
                    b.Property<int>("VisitorHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorHistoryId"));

                    b.Property<string>("VisitorCheckInTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitorCheckOutTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.Property<bool?>("VisitorNamesIsChanged")
                        .HasColumnType("bit");

                    b.Property<int?>("VisitorNewCurrency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitorNewEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitorNewRoomNumber")
                        .HasColumnType("int");

                    b.Property<double?>("VisitorNewRoomPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("VisitorNewStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitorOldCurrency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitorOldEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VisitorOldRoomNumber")
                        .HasColumnType("int");

                    b.Property<double?>("VisitorOldRoomPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("VisitorOldStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VisitorUpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitorHistoryId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorHistories");
                });

            modelBuilder.Entity("EntityLayer.Entities.VisitorProperty", b =>
                {
                    b.Property<int>("VisitorPropertiyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorPropertiyId"));

                    b.Property<bool>("VisitorActive")
                        .HasColumnType("bit");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitorSurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorPropertiyId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitorProperties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Entities.Payment", b =>
                {
                    b.HasOne("EntityLayer.Entities.Visitor", "Visitor")
                        .WithMany("Payments")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("EntityLayer.Entities.VisitorHistory", b =>
                {
                    b.HasOne("EntityLayer.Entities.Visitor", "Visitor")
                        .WithMany("VisitorHistories")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("EntityLayer.Entities.VisitorProperty", b =>
                {
                    b.HasOne("EntityLayer.Entities.Visitor", "Visitor")
                        .WithMany("VisitorProperties")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Entities.Visitor", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("VisitorHistories");

                    b.Navigation("VisitorProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
